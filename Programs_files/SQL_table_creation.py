from sqlalchemy import create_engine, Column, Integer,String,Date,Boolean,ForeignKey,text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
DB_link="mysql+pymysql://root:12345@localhost/"
engine=create_engine(DB_link)
with engine.connect() as connection:
    connection.execute(text('create database if not exists cricket_analysis'))
    print ('Data base has been created')
    connection.execute(text('use cricket_analysis'))
    DB_link="mysql+pymysql://root:12345@localhost/cricket_analysis"
engine=create_engine(DB_link)
Base=declarative_base()
class TestMatch(Base):
    __tablename__='test_matches'
    match_id=Column(String(100),primary_key=True)
    date=Column(Date)
    venue=Column(String(255))
    city=Column(String(255))
    team1 = Column(String(100))
    team2 = Column(String(100))
    toss_winner = Column(String(100))
    toss_decision = Column(String(20))
    match_winner = Column(String(100))
    win_by_runs = Column(Integer)
    win_by_wickets = Column(Integer)
    player_of_match = Column(String(255))
    match_type = Column(String(20))
    overs = Column(Integer)
class TestDelivery(Base):
    __tablename__='test_deliveries'
    delivery_id=Column(Integer,primary_key=True,autoincrement=True)
    match_id = Column(String(100), ForeignKey("test_matches.match_id"))
    inning = Column(Integer)
    over = Column(Integer)
    ball = Column(Integer)
    batting_team = Column(String(100))
    batsman = Column(String(100))
    bowler = Column(String(100))
    runs_batter = Column(Integer)
    runs_extras = Column(Integer)
    runs_total = Column(Integer)
    extras_type = Column(String(50))
    is_wicket = Column(Boolean)
    wicket_kind = Column(String(50))
    player_out = Column(String(100))
class ODIMatch(Base):
    __tablename__ = 'odi_matches'
    match_id = Column(String(100), primary_key=True)
    date = Column(Date)
    venue = Column(String(255))
    city = Column(String(255))
    team1 = Column(String(100))
    team2 = Column(String(100))
    toss_winner = Column(String(100))
    toss_decision = Column(String(20))
    match_winner = Column(String(100))
    win_by_runs = Column(Integer)
    win_by_wickets = Column(Integer)
    player_of_match = Column(String(255))
    match_type = Column(String(20))
    overs = Column(Integer)

class ODIDelivery(Base):
    __tablename__ = 'odi_deliveries'
    delivery_id = Column(Integer, primary_key=True, autoincrement=True)
    match_id = Column(String(100), ForeignKey("odi_matches.match_id"))
    inning = Column(Integer)
    over = Column(Integer)
    ball = Column(Integer)
    batting_team = Column(String(100))
    batsman = Column(String(100))
    bowler = Column(String(100))
    runs_batter = Column(Integer)
    runs_extras = Column(Integer)
    runs_total = Column(Integer)
    extras_type = Column(String(50))
    is_wicket = Column(Boolean)
    wicket_kind = Column(String(50))
    player_out = Column(String(100))

class T20Match(Base):
    __tablename__ = 't20_matches'
    match_id = Column(String(100), primary_key=True)
    date = Column(Date)
    venue = Column(String(255))
    city = Column(String(255))
    team1 = Column(String(100))
    team2 = Column(String(100))
    toss_winner = Column(String(100))
    toss_decision = Column(String(20))
    match_winner = Column(String(100))
    win_by_runs = Column(Integer)
    win_by_wickets = Column(Integer)
    player_of_match = Column(String(255))
    match_type = Column(String(20))
    overs = Column(Integer)

class T20Delivery(Base):
    __tablename__ = 't20_deliveries'
    delivery_id = Column(Integer, primary_key=True, autoincrement=True)
    match_id = Column(String(100), ForeignKey("t20_matches.match_id"))
    inning = Column(Integer)
    over = Column(Integer)
    ball = Column(Integer)
    batting_team = Column(String(100))
    batsman = Column(String(100))
    bowler = Column(String(100))
    runs_batter = Column(Integer)
    runs_extras = Column(Integer)
    runs_total = Column(Integer)
    extras_type = Column(String(50))
    is_wicket = Column(Boolean)
    wicket_kind = Column(String(50))
    player_out = Column(String(100))

class IPLMatch(Base):
    __tablename__ = 'ipl_matches'
    match_id = Column(String(100), primary_key=True)
    date = Column(Date)
    venue = Column(String(255))
    city = Column(String(255))
    team1 = Column(String(100))
    team2 = Column(String(100))
    toss_winner = Column(String(100))
    toss_decision = Column(String(20))
    match_winner = Column(String(100))
    win_by_runs = Column(Integer)
    win_by_wickets = Column(Integer)
    player_of_match = Column(String(255))
    match_type = Column(String(20))
    overs = Column(Integer)

class IPLDelivery(Base):
    __tablename__ = 'ipl_deliveries'
    delivery_id = Column(Integer, primary_key=True, autoincrement=True)
    match_id = Column(String(100), ForeignKey("ipl_matches.match_id"))
    inning = Column(Integer)
    over = Column(Integer)
    ball = Column(Integer)
    batting_team = Column(String(100))
    batsman = Column(String(100))
    bowler = Column(String(100))
    runs_batter = Column(Integer)
    runs_extras = Column(Integer)
    runs_total = Column(Integer)
    extras_type = Column(String(50))
    is_wicket = Column(Boolean)
    wicket_kind = Column(String(50))
    player_out = Column(String(100))

Base.metadata.create_all(engine)
print("All tables created successfully in cricket_analysis database")